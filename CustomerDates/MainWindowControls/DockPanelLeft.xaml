<UserControl x:Class="CustomerDates.MainWindowControls.DockPanelLeft"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:CustomerDates.MainWindowControls" xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="130">
    <UserControl.Resources>
        <FontFamily x:Key="cdfont">Arial</FontFamily>

        <SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>
        <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
        <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FF1C1492"/>
        <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FFFFFFFF"/>
        <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FF665CFF"/>
        <SolidColorBrush x:Key="Button.Pressed.Border" Color="White"/>
        <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
        <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
        <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>
        <Style x:Key="ObjectsButtonsStyle" TargetType="{x:Type Button}">
            <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">

                                <Setter Property="BorderBrush" TargetName="border" Value="#FF000000"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="#FF000000"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </UserControl.Resources>
    <Grid>

        <DockPanel x:Name="ObjectsDock" Margin="0,0,-0.4,-0.4">
            <DockPanel.Background>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="#FF00129A" Offset="0"/>
                    <GradientStop Color="#FF4B5DDF" Offset="1"/>
                </LinearGradientBrush>
            </DockPanel.Background>
            <StackPanel DockPanel.Dock="Top">
                <Grid Height="100" Width="130" VerticalAlignment="Top" Margin="0,0,-0.4,0">
                    <Grid.RowDefinitions>
                        <RowDefinition/>
                        <RowDefinition/>
                        <RowDefinition/>
                    </Grid.RowDefinitions>

                    <ComboBox Grid.Row="0" x:Name="vtypecbx" FontFamily="{StaticResource cdfont}" Width="120" Height="26" Background="White" BorderThickness="0,0,0,1">
                        <ComboBox.Template>
                            <ControlTemplate TargetType="{x:Type ComboBox}">
                                <Grid x:Name="templateRoot" SnapsToDevicePixels="True">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
                                    </Grid.ColumnDefinitions>
                                    <Popup x:Name="PART_Popup" AllowsTransparency="True" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
                                        <Themes:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                                            <Border x:Name="DropDownBorder" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="1" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
                                                <ScrollViewer x:Name="DropDownScrollViewer">
                                                    <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                                        <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                                            <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=DropDownBorder}" Height="{Binding ActualHeight, ElementName=DropDownBorder}" Width="{Binding ActualWidth, ElementName=DropDownBorder}"/>
                                                        </Canvas>
                                                        <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                                    </Grid>
                                                </ScrollViewer>
                                            </Border>
                                        </Themes:SystemDropShadowChrome>
                                    </Popup>
                                    <ToggleButton x:Name="toggleButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                                        <ToggleButton.Style>
                                            <Style TargetType="{x:Type ToggleButton}">
                                                <Setter Property="OverridesDefaultStyle" Value="True"/>
                                                <Setter Property="IsTabStop" Value="False"/>
                                                <Setter Property="Focusable" Value="False"/>
                                                <Setter Property="ClickMode" Value="Press"/>
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                            <Border x:Name="templateRoot" BorderBrush="White" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True" Background="#FF00129A">
                                                                <Border x:Name="splitBorder" BorderBrush="Transparent" BorderThickness="1" HorizontalAlignment="Right" Margin="0" SnapsToDevicePixels="True" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                                                                    <Path x:Name="Arrow" Data="F1M0,0L2.667,2.66665 5.3334,0 5.3334,-1.78168 2.6667,0.88501 0,-1.78168 0,0z" Fill="White" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center"/>
                                                                </Border>
                                                            </Border>
                                                            <ControlTemplate.Triggers>
                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true"/>
                                                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="false"/>
                                                                        <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="false"/>
                                                                        <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                                    </MultiDataTrigger.Conditions>
                                                                    <Setter Property="Background" TargetName="templateRoot" Value="White"/>
                                                                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="#FFABADB3"/>
                                                                    <Setter Property="Background" TargetName="splitBorder" Value="Transparent"/>
                                                                    <Setter Property="BorderBrush" TargetName="splitBorder" Value="Transparent"/>
                                                                </MultiDataTrigger>
                                                                <Trigger Property="IsMouseOver" Value="True">
                                                                    <Setter Property="Fill" TargetName="Arrow" Value="#FF007AFF"/>
                                                                </Trigger>
                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="false"/>
                                                                    </MultiDataTrigger.Conditions>


                                                                </MultiDataTrigger>
                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true"/>
                                                                    </MultiDataTrigger.Conditions>
                                                                    <Setter Property="Background" TargetName="templateRoot" Value="White"/>
                                                                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="#FF7EB4EA"/>
                                                                    <Setter Property="Background" TargetName="splitBorder">
                                                                        <Setter.Value>
                                                                            <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                                                <GradientStop Color="#FFEBF4FC" Offset="0"/>
                                                                                <GradientStop Color="#FFDCECFC" Offset="1"/>
                                                                            </LinearGradientBrush>
                                                                        </Setter.Value>
                                                                    </Setter>
                                                                    <Setter Property="BorderBrush" TargetName="splitBorder" Value="#FF7EB4EA"/>
                                                                </MultiDataTrigger>
                                                                <Trigger Property="IsPressed" Value="True">
                                                                    <Setter Property="Fill" TargetName="Arrow" Value="Black"/>
                                                                </Trigger>
                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="false"/>
                                                                    </MultiDataTrigger.Conditions>
                                                                </MultiDataTrigger>
                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true"/>
                                                                    </MultiDataTrigger.Conditions>
                                                                    <Setter Property="Background" TargetName="templateRoot" Value="White"/>
                                                                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="#FF569DE5"/>
                                                                    <Setter Property="Background" TargetName="splitBorder">
                                                                        <Setter.Value>
                                                                            <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                                                <GradientStop Color="#FFDAEBFC" Offset="0"/>
                                                                                <GradientStop Color="#FFC4E0FC" Offset="1"/>
                                                                            </LinearGradientBrush>
                                                                        </Setter.Value>
                                                                    </Setter>
                                                                    <Setter Property="BorderBrush" TargetName="splitBorder" Value="#FF569DE5"/>
                                                                </MultiDataTrigger>
                                                                <Trigger Property="IsEnabled" Value="False">
                                                                    <Setter Property="Fill" TargetName="Arrow" Value="#FFBFBFBF"/>
                                                                </Trigger>
                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="false"/>
                                                                    </MultiDataTrigger.Conditions>
                                                                    <Setter Property="Background" TargetName="templateRoot" Value="#FFF0F0F0"/>
                                                                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="#FFD9D9D9"/>
                                                                </MultiDataTrigger>
                                                                <MultiDataTrigger>
                                                                    <MultiDataTrigger.Conditions>
                                                                        <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="true"/>
                                                                    </MultiDataTrigger.Conditions>
                                                                    <Setter Property="Background" TargetName="templateRoot" Value="White"/>
                                                                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="#FFBFBFBF"/>
                                                                    <Setter Property="Background" TargetName="splitBorder" Value="Transparent"/>
                                                                    <Setter Property="BorderBrush" TargetName="splitBorder" Value="Transparent"/>
                                                                </MultiDataTrigger>
                                                            </ControlTemplate.Triggers>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </ToggleButton.Style>
                                    </ToggleButton>
                                    <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="False" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="True">
                                        <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                                        <Setter Property="Color" TargetName="shadow" Value="#71000000"/>
                                    </Trigger>
                                    <Trigger Property="HasItems" Value="False">
                                        <Setter Property="Height" TargetName="DropDownBorder" Value="95"/>
                                    </Trigger>
                                    <MultiTrigger>
                                        <MultiTrigger.Conditions>
                                            <Condition Property="IsGrouping" Value="True"/>
                                            <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False"/>
                                        </MultiTrigger.Conditions>
                                        <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
                                    </MultiTrigger>
                                    <Trigger Property="CanContentScroll" SourceName="DropDownScrollViewer" Value="False">
                                        <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                                        <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </ComboBox.Template>
                        <ComboBoxItem Content="Name"/>
                        <ComboBoxItem Content="Phone"/>
                        <ComboBoxItem Content="Model"/>
                        <ComboBoxItem Content="Serial Number"/>
                        <ComboBoxItem Content="Infopren Code"/>

                    </ComboBox>

                    <TextBox Grid.Row="1" x:Name="Valuesch" Height="26" Background="{x:Null}" TextWrapping="Wrap" Text="Value"  Width="120"  FontFamily="{StaticResource cdfont}" Foreground="White" Padding="3,0,0,0" VerticalContentAlignment="Center" BorderBrush="White" BorderThickness="0,0,0,1"/>
                    <Button Grid.Row="2" x:Name="Searchexecute" Content="Search" FontFamily="{StaticResource cdfont}" Width="120" BorderBrush="White" BorderThickness="1" Height="26" Foreground="White" Background="#FF03136B" >
                        <Button.Template>
                            <ControlTemplate TargetType="{x:Type ButtonBase}">
                                <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}"  BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                                    <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                </Border>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="Button.IsDefaulted" Value="True">
                                        <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                    </Trigger>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Background" TargetName="border">
                                            <Setter.Value>
                                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                                    <GradientStop Color="#FF332E80" Offset="0"/>
                                                    <GradientStop Color="#FF665CFF" Offset="1"/>
                                                </LinearGradientBrush>
                                            </Setter.Value>
                                        </Setter>
                                    </Trigger>
                                    <Trigger Property="IsPressed" Value="True">

                                        <Setter Property="BorderBrush" TargetName="border" Value="White"/>
                                        <Setter Property="Background" TargetName="border" Value="Black"/>

                                    </Trigger>
                                    <Trigger Property="ToggleButton.IsChecked" Value="True">
                                        <Setter Property="Background" TargetName="border" Value="#FFBCDDEE"/>
                                        <Setter Property="BorderBrush" TargetName="border" Value="#FF245A83"/>
                                    </Trigger>
                                    <Trigger Property="IsEnabled" Value="False">
                                        <Setter Property="Background" TargetName="border" Value="#FFF4F4F4"/>
                                        <Setter Property="BorderBrush" TargetName="border" Value="#FFADB2B5"/>
                                        <Setter Property="Foreground" Value="#FF838383"/>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Button.Template>
                    </Button>
                    <TextBlock Grid.Row="0" x:Name="vtypetxt" Foreground="White" FontFamily="{StaticResource cdfont}" HorizontalAlignment="Left" TextWrapping="Wrap" Text="Search By" VerticalAlignment="Center" Margin="7,0,0,0"/>

                </Grid>
                <Button Content="Computer" Margin="0,6,0,0" x:Name="Comp" HorizontalAlignment="Left" VerticalAlignment="Top" Width="130" Foreground="White" BorderBrush="{x:Null}" Background="{x:Null}" FontFamily="{StaticResource cdfont}" FontSize="14" Height="31"  Style="{DynamicResource ObjectsButtonsStyle}" BorderThickness="2,0,0,0" Cursor="Hand"/>
                <Button Content="Laptop" x:Name="Lap" Margin="0,6,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Width="130" Foreground="White" BorderBrush="{x:Null}" Background="{x:Null}" FontFamily="{StaticResource cdfont}" FontSize="14" Height="31" Style="{DynamicResource ObjectsButtonsStyle}" BorderThickness="2,0,0,0" Cursor="Hand"/>
                <Button Content="Mobile" x:Name="Mobi" Margin="0,6,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Width="130" Foreground="White" BorderBrush="{x:Null}" Background="{x:Null}" FontFamily="{StaticResource cdfont}" FontSize="14" Height="31" Style="{DynamicResource ObjectsButtonsStyle}" BorderThickness="2,0,0,0" Cursor="Hand"/>
                <Button Content="Tablet" x:Name="Tblet" Margin="0,6,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Width="130" Foreground="White" BorderBrush="{x:Null}" Background="{x:Null}" FontFamily="{StaticResource cdfont}" FontSize="14" Height="31" Style="{DynamicResource ObjectsButtonsStyle}" BorderThickness="2,0,0,0" Cursor="Hand"/>
                <Button Content="Other Devices" x:Name="Oth" Margin="0,6,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Width="130" Foreground="White" BorderBrush="{x:Null}" Background="{x:Null}" FontFamily="{StaticResource cdfont}" FontSize="14" Height="31" Style="{DynamicResource ObjectsButtonsStyle}" BorderThickness="2,0,0,0" Cursor="Hand"/>

            </StackPanel>
            <Button x:Name="homebtn" HorizontalAlignment="Center" Width="30" BorderBrush="{x:Null}" BorderThickness="0" Margin="0,0,0,10" Height="30" VerticalAlignment="Bottom" Cursor="Hand" Click="homebtn_Click">
                <Button.Background>
                    <ImageBrush ImageSource="/CustomerDates;component/Resources/Assets/homebtn.png"/>
                </Button.Background>
                <Button.Template>
                    <ControlTemplate TargetType="{x:Type ButtonBase}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="Button.IsDefaulted" Value="True">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" TargetName="border">
                                    <Setter.Value>
                                        <ImageBrush ImageSource="/CustomerDates;component/Resources/Assets/homebtnmousehover.png"/>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" TargetName="border">
                                    <Setter.Value>
                                        <ImageBrush ImageSource="/CustomerDates;component/Resources/Assets/homebtnpressed.png"/>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Background" TargetName="border" Value="#FFF4F4F4"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="#FFADB2B5"/>
                                <Setter Property="Foreground" Value="#FF838383"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Button.Template>
            </Button>
        </DockPanel>
    </Grid>
</UserControl>
